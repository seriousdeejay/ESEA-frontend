{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.string.trim.js","webpack:///./src/components/PersonalisedDatatable.vue","webpack:///./src/components/PersonalisedDatatable.vue?047b","webpack:///./node_modules/core-js/internals/string-trim-forced.js","webpack:///./src/views/network/Networks.vue","webpack:///./src/views/network/Networks.vue?a125"],"names":["$","$trim","trim","forcedStringTrimMethod","target","proto","forced","this","ref","value","customData","selection","selectedRows","selectionMode","selectionToggle","dataKey","metaKeySelection","onRowSelect","paginator","rows","filters","paginatorTemplate","rowsPerPageOptions","currentPageReportTemplate","class","columns","col","field","header","key","slotProps","data","ispublic","props","tableName","type","String","Object","Array","Boolean","watch","val","console","log","methods","event","$emit","render","fails","whitespaces","non","module","exports","METHOD_NAME","name","for","position","left","label","icon","openCreateNetworkDialog","right","placeholder","table-name","selection-toggle","NetworkColumns","custom-data","networks","goToNetwork","visible","networkDialog","style","modal","footer","hideDialog","saveNetwork","disabled","networkForm","id","required","autofocus","submitted","description","cols","options","ispublicbool","components","PersonalisedDatatable","selectedNetworks","computed","created","initialize","fetchNetworks","setNetwork","createNetwork","$toast","add","severity","summary","detail","life","$router","push","params","NetworkId","network"],"mappings":"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","file":"js/chunk-cec83f6e.63e15d40.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.es/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","<template>\r\n        <DataTable ref=\"dt\" :value=\"customData\" v-model:selection=\"selectedRows\" :selectionMode=\"selectionToggle? 'multiple' : 'single'\" dataKey=\"id\" :metaKeySelection=\"false\" @row-select=\"onRowSelect\"\r\n        :paginator=\"true\" :rows=\"10\" :filters=\"filters\" paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n        :rowsPerPageOptions=\"[5,10,25]\" currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\" class=\"p-datatable-striped\">\r\n\r\n            <!-- <h1>{{tableName}}</h1> -->\r\n            <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\">\r\n            <template v-if=\"col.field === 'ispublic'\" #body=\"slotProps\">\r\n                <i class=\"pi\" :class=\"{'true-icon pi-check-circle': slotProps.data.ispublic, 'false-icon pi-times-circle': !slotProps.data.ispublic}\"></i>\r\n            </template>\r\n            </Column>\r\n        </DataTable>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        tableName: {\r\n            type: String\r\n        },\r\n        customData: {\r\n            type: Object\r\n        },\r\n        columns: {\r\n            type: Array\r\n        },\r\n        selectionToggle: {\r\n            type: Boolean\r\n        },\r\n        filters: {\r\n            type: Object\r\n        }\r\n    },\r\n    data () {\r\n        return {\r\n            selectedRows: null\r\n            // enableButton: { name: 'Off', value: false },\r\n            // options: [{ name: 'Off', value: false }, { name: 'On', value: true }]\r\n        }\r\n    },\r\n    watch: {\r\n        selectedRows: function (val) {\r\n            if (val) {\r\n            console.log(this.selectedRows)\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        onRowSelect (event) {\r\n            this.$emit('item-redirect', this.selectedRows)\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import { render } from \"./PersonalisedDatatable.vue?vue&type=template&id=a080eb68\"\nimport script from \"./PersonalisedDatatable.vue?vue&type=script&lang=js\"\nexport * from \"./PersonalisedDatatable.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","        <template>\r\n    <h1>Networks Overview</h1>\r\n    <div class=\"networks\">\r\n        <Toast position=\"top-right\"/>\r\n        <div class=\"card p-m-5 p-shadow-2\">\r\n          <Toolbar>\r\n                <template #left>\r\n                        <Button label=\"Create Network\" icon=\"pi pi-plus\" class=\"p-button-success\" @click=\"openCreateNetworkDialog\" />\r\n                </template>\r\n                <template #right>\r\n                    <span class=\"p-input-icon-left\">\r\n                        <i class=\"pi pi-search\" />\r\n                        <InputText v-model=\"filters['global']\" placeholder=\"Search...\" />\r\n                    </span>\r\n                </template>\r\n            </Toolbar>\r\n            <personalised-datatable table-name=\"networks\" selection-toggle :columns=\"NetworkColumns\" :filters=\"filters\"\r\n            :custom-data=\"networks\" @item-redirect=\"goToNetwork\"/>\r\n        </div>\r\n    </div>\r\n    <Dialog v-model:visible=\"networkDialog\" :style=\"{width: '450px'}\" header=\"Network Details\" :modal=\"true\" class=\"p-fluid\">\r\n        <div class=\"p-field\">\r\n            <label for=\"name\">Name</label>\r\n            <InputText id=\"name\" v-model.trim=\"networkForm.name\" required=\"true\" autofocus :class=\"{'p-invalid': submitted && !networkForm.name}\" />\r\n            <small class=\"p-error\" v-if=\"submitted && !networkForm.name\">Name is required.</small>\r\n        </div>\r\n        <div class=\"p-field\">\r\n            <label for=\"description\">Description</label>\r\n            <Textarea id=\"description\" v-model=\"networkForm.description\" required=\"true\" rows=\"3\" cols=\"20\" />\r\n        </div>\r\n        <div class=\"p-field\">\r\n            <label for=\"ispublic\">Should this network be public? </label>\r\n            <SelectButton id=\"ispublic\" v-model=\"networkForm.ispublic\" required=\"true\" :options=\"ispublicbool\" />\r\n        </div>\r\n        <template #footer>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" class=\"p-button-text\" @click=\"hideDialog\"/>\r\n            <Button label=\"Save\" icon=\"pi pi-check\" class=\"p-button-text\" @click=\"saveNetwork\" :disabled=\"!networkForm.name\" />\r\n        </template>\r\n    </Dialog>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex'\r\nimport PersonalisedDatatable from '../../components/PersonalisedDatatable'\r\n\r\nexport default {\r\n        components: {\r\n        PersonalisedDatatable\r\n    },\r\n    data () {\r\n        return {\r\n            NetworkColumns: [\r\n                { field: 'ispublic', header: 'Public' },\r\n                { field: 'name', header: 'Name' },\r\n                { field: 'description', header: 'Description' },\r\n                { field: 'organisations.length', header: 'Organisations' },\r\n                { field: 'created_by', header: 'Created by' }\r\n            ],\r\n            selectionToggle: false,\r\n            selectedNetworks: null,\r\n            filters: {},\r\n            ispublicbool: [true, false],\r\n            networkDialog: false,\r\n            submitted: false,\r\n            networkForm: {\r\n                name: null,\r\n                description: '',\r\n                ispublic: true\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapState('network', ['networks', 'network'])\r\n    },\r\n    created () {\r\n        this.initialize()\r\n    },\r\n    methods: {\r\n        ...mapActions('network', ['fetchNetworks', 'setNetwork', 'createNetwork']),\r\n        async initialize () {\r\n            await this.fetchNetworks({})\r\n        },\r\n        async openCreateNetworkDialog () {\r\n            await this.setNetwork({})\r\n            this.submitted = false\r\n            this.networkDialog = true\r\n        },\r\n        async saveNetwork () {\r\n            this.submitted = true\r\n            if (this.networkForm.name.trim()) {\r\n                await this.createNetwork({ data: this.networkForm })\r\n                this.$toast.add({ severity: 'success', summary: 'Succesful', detail: 'Network created', life: 3000 })\r\n            this.networkDialog = false\r\n            this.$router.push({ name: 'networkoverview', params: { NetworkId: this.network.id } })\r\n            }\r\n        },\r\n        hideDialog () {\r\n            this.networkDialog = false\r\n            this.submitted = true\r\n        },\r\n        goToNetwork (selectedRows) {\r\n            if (!this.selectionToggle) {\r\n                console.log(selectedRows[0])\r\n                this.setNetwork({ ...selectedRows[0] })\r\n                // this.$toast.add({ severity: 'info', summary: 'Network Selected', detail: 'Name: ' + event.name, life: 3000 })\r\n                this.$router.push({ name: 'networkoverview', params: { NetworkId: this.network.id } })\r\n            } else {\r\n                this.selectedNetworks = selectedRows\r\n            }\r\n        }\r\n    }\r\n}\r\n       //  editNetwork (network) {\r\n      //    this.network = { ...network }\r\n      //    this.networkDialog = true\r\n      //  },\r\n      //  confirmDeleteNetwork (network) {\r\n      //    this.network = network\r\n      //    this.deleteNetworkDialog = true\r\n      //  },\r\n\r\n      //  async removeNetwork (network) {\r\n      //    this.deleteNetworkDialog = false\r\n      //    this.deleteNetwork({ id: network.id })\r\n      //    // this.network = {}\r\n      //    this.$toast.add({ severity: 'success', summary: 'Succesful', detail: 'Network Deleted', life: 3000 })\r\n      //  },\r\n\r\n            //  deleteNetwork () {\r\n      //    this.deleteNetworkDialog = true\r\n      //    this.$store.state.networks = this.$store.state.networks.filter(val => val.id !== this.network.id)\r\n      //    this.network = {}\r\n      //    this.$toast.add({ severity: 'success', summary: 'Succesful', detail: 'Network Deleted', life: 3000 })\r\n      //  },\r\n\r\n          //  if (this.network.id) {\r\n          //    this.$store.state.networks[this.findIndexById(this.network.id)] = this.network\r\n          //    this.$toast.add({ severity: 'success', summary: 'Succesful', detail: 'Network updated', life: 3000 })\r\n          //  } else {\r\n\r\n      //  findIndexById (id) {\r\n      //      let index = -1\r\n      //      for (let i = 0; i < this.$store.state.networks.length; i++) {\r\n      //          if (this.$store.state.networks[i].id === id) {\r\n      //            index = i\r\n      //              break\r\n      //          }\r\n      //      }\r\n        //    return index\r\n        //  },\r\n </script>\r\n","import { render } from \"./Networks.vue?vue&type=template&id=c835d95c\"\nimport script from \"./Networks.vue?vue&type=script&lang=js\"\nexport * from \"./Networks.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}